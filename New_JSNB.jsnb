{
  "metadata": {
    "name": "New JSNB",
    "language_info": {
      "name": "JavaScipt",
      "version": "8.0"
    }
  },
  "jsnbversion": "v0.1",
  "cells": [
    {
      "code": "scrib.loadCSS(\"https://sumidemoo.surge.sh/styles.css\")",
      "status": "[25]<br><span style=\"font-size:8px\">0ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "\n<div style=\"color: black;\" class=\"bg-white text-black font-sans h-full w-full p-0 m-0 font-ui overflow-hidden\">\n    <div id='sliders-parent' style=\"display: none;\" class=\"z-10 absolute flex flex-col border-black bg-white border\">\n        <div class=\"window-top px-4 border-b-[1px] border-black cursor-move w-full\">Sliders</div>\n        <div id=\"sliders\" class=\"p-4 flex flex-col\"></div>\n    </div>\n    <nav class=\" px-10 grid grid-cols-3 border-b-black border-b-[1px]\">\n        <div class=\"flex gap-4\">\n            <span>⁘</span>\n            <button style=\"all: unset; display: inline-block; cursor:pointer\" class=\"inline-block cursor-pointer\">File</button>\n            <button style=\"all: unset; display: inline-block; cursor:pointer\" class=\"inline-block cursor-pointer\">Project</button>\n            <button style=\"all: unset; display: inline-block; cursor:pointer\" class=\"inline-block cursor-pointer\">View</button>\n            <button style=\"all: unset; display: inline-block; cursor:pointer\" id=\"examples-btn\" class=\"inline-block cursor-pointer\">Examples</button>\n        </div>\n        <div class=\"ml-auto mr-auto\">\n            <button id='run' style=\"border-radius: 0; border: none; display: unset;\" class=\"px-[1em] py-[1px] bg-blue-500 text-white\">⯈</button>\n            <button data-toggled=\"false\" id=\"toggleLive\" style=\"border-radius: 0; border: none; display: unset;\"\n                class=\"px-[1em] py-[1px] data-[toggled=true]:bg-yellow-500 data-[toggled=true]:text-white text-yellow-500\">▲</button>\n            <!-- <span id=\"status\">⬤ Ready</span> -->\n        </div>\n        <div class=\"ml-auto\">\n            <span id=\"coords\"></span>\n            <span id=\"circle-coords\"></span>\n        </div>\n    </nav>\n    <div class=\"flex max-h-[96vh]\">\n        <section class=\"flex w-[35%] bg-gray-100 border-r-[1px] relative border-r-black\">\n            <div class=\"w-full h-full p-2 whitespace-pre overflow-y-scroll\" contenteditable=\"\" spellcheck=\"false\"\n                id=\"editor\"></div>\n                <!-- <div class=\"h-full w-[1em] break-all\" id=\"errorLine\"></div> -->\n        </section>\n        <section class=\"w-full h-[95vh] relative\">\n                        <canvas id=\"drawingCanvas\"></canvas>\n            <canvas class=\"absolute top-0 left-0\" id=\"tools\">\n            </canvas>\n            <div id=\"examples\" class=\"bg-white w-full h-full py-10 hidden\" style=\"z-index: 1\">\n                <h2 class=\"text-2xl font-bold text-center mb-4 text-black\">Examples</h2>\n                <div class=\"grid grid-cols-3 grid-rows-2 ml-4 mr-4 gap-4\">\n                    <div class=\"border border-black\" onclick=\"selectExample('low')\">\n                        <img  src=\"https://deepakjois.github.io/hs-logo/examples/svgs/low.svg\" alt=\"\" class=\"border-b-[1px] border-black\">\n                        <h4 class=\"ml-4 text-black\">Low</h4>\n                    </div>\n\n                    <div class=\"border border-black\" onclick=\"selectExample('rotcircle')\">\n                        <img  src=\"https://deepakjois.github.io/hs-logo/examples/svgs/rotating_circle.svg\" alt=\"\" class=\"border-b-[1px] border-black\">\n                        <h4 class=\"ml-4 text-black\">Rotating Circle</h4>\n                    </div>\n\n                    <div class=\"border border-black\" onclick=\"selectExample('siggen')\">\n                        <img  src=\"https://0x0.st/XDkc.png\" alt=\"\" class=\"border-b-[1px] border-black\">\n                        <h4 class=\"ml-4 text-black\">Signal Generator</h4>\n                    </div>\n                </div>\n            </div>\n            <div class=\"absolute top-0 left-0 w-full\">\n                <div class=\"bg-white w-full  flex gap-1 border-b-[1px] border-b-black px-4 \">\n                    <span class=\"block\">&gt;</span>\n                    <span contenteditable=\"\" id=\"runcmd\" class=\"block w-full\"></span>\n                </div>\n                <div class=\"px-4 text-red-400 [&:not(:empty)]:bg-white\" id=\"errormessage\">\n                </div>\n            </div>\n        </section>\n    </div>\n</div>\n\n<script>\n\n\t\t\t\t  </script>",
      "status": "",
      "output": "\n<div style=\"color: black;\" class=\"bg-white text-black font-sans h-full w-full p-0 m-0 font-ui overflow-hidden\">\n    <div id=\"sliders-parent\" style=\"display: block; top: 385px; left: 698px;\" class=\"z-10 absolute flex flex-col border-black bg-white border\">\n        <div class=\"window-top px-4 border-b-[1px] border-black cursor-move w-full\">Sliders</div>\n        <div id=\"sliders\" class=\"p-4 flex flex-col\"><label>Amplitude</label><input type=\"range\" min=\"0\" max=\"100\" step=\"5\" id=\"Amplitude\"><label>Frequency</label><input type=\"range\" min=\"0\" max=\"100\" step=\"5\" id=\"Frequency\"></div>\n    </div>\n    <nav class=\" px-10 grid grid-cols-3 border-b-black border-b-[1px]\">\n        <div class=\"flex gap-4\">\n            <span>⁘</span>\n            <button style=\"all: unset; display: inline-block; cursor:pointer\" class=\"inline-block cursor-pointer\">File</button>\n            <button style=\"all: unset; display: inline-block; cursor:pointer\" class=\"inline-block cursor-pointer\">Project</button>\n            <button style=\"all: unset; display: inline-block; cursor:pointer\" class=\"inline-block cursor-pointer\">View</button>\n            <button style=\"all: unset; display: inline-block; cursor:pointer\" id=\"examples-btn\" class=\"inline-block cursor-pointer\">Examples</button>\n        </div>\n        <div class=\"ml-auto mr-auto\">\n            <button id=\"run\" style=\"border-radius: 0; border: none; display: unset;\" class=\"px-[1em] py-[1px] bg-blue-500 text-white\">⯈</button>\n            <button data-toggled=\"true\" id=\"toggleLive\" style=\"border-radius: 0; border: none; display: unset;\" class=\"px-[1em] py-[1px] data-[toggled=true]:bg-yellow-500 data-[toggled=true]:text-white text-yellow-500\">▲</button>\n            <!-- <span id=\"status\">⬤ Ready</span> -->\n        </div>\n        <div class=\"ml-auto\">\n            <span id=\"coords\">X: 6, Y: 219</span>\n            <span id=\"circle-coords\"></span>\n        </div>\n    </nav>\n    <div class=\"flex max-h-[96vh]\">\n        <section class=\"flex w-[35%] bg-gray-100 border-r-[1px] relative border-r-black\">\n            <div class=\"w-full h-full p-2 whitespace-pre overflow-y-scroll\" contenteditable=\"\" spellcheck=\"false\" id=\"editor\">\n        \n        _.clear();\n        const A = _.slider(\"Amplitude\", 0, 100, 50);\n        const F = _.slider(\"Frequency\", 0, 100, 10);\n\n        for (let i = 0; i &lt; 100; i += 0.01) {\n            _.fill(_.circle(100 + i * 10, 100 + A * _.sin(i * F), 1));\n        }\n        </div>\n                <!-- <div class=\"h-full w-[1em] break-all\" id=\"errorLine\"></div> -->\n        </section>\n        <section class=\"w-full h-[95vh] relative\">\n                        <canvas id=\"drawingCanvas\" width=\"896\" height=\"652\" class=\"\"></canvas>\n            <canvas class=\"absolute top-0 left-0\" id=\"tools\" width=\"896\" height=\"652\">\n            </canvas>\n            <div id=\"examples\" class=\"bg-white w-full h-full py-10 hidden\" style=\"z-index: 1\">\n                <h2 class=\"text-2xl font-bold text-center mb-4 text-black\">Examples</h2>\n                <div class=\"grid grid-cols-3 grid-rows-2 ml-4 mr-4 gap-4\">\n                    <div class=\"border border-black\" onclick=\"selectExample('low')\">\n                        <img src=\"https://deepakjois.github.io/hs-logo/examples/svgs/low.svg\" alt=\"\" class=\"border-b-[1px] border-black\">\n                        <h4 class=\"ml-4 text-black\">Low</h4>\n                    </div>\n\n                    <div class=\"border border-black\" onclick=\"selectExample('rotcircle')\">\n                        <img src=\"https://deepakjois.github.io/hs-logo/examples/svgs/rotating_circle.svg\" alt=\"\" class=\"border-b-[1px] border-black\">\n                        <h4 class=\"ml-4 text-black\">Rotating Circle</h4>\n                    </div>\n\n                    <div class=\"border border-black\" onclick=\"selectExample('siggen')\">\n                        <img src=\"https://0x0.st/XDkc.png\" alt=\"\" class=\"border-b-[1px] border-black\">\n                        <h4 class=\"ml-4 text-black\">Signal Generator</h4>\n                    </div>\n                </div>\n            </div>\n            <div class=\"absolute top-0 left-0 w-full\">\n                <div class=\"bg-white w-full  flex gap-1 border-b-[1px] border-b-black px-4 \">\n                    <span class=\"block\">&gt;</span>\n                    <span contenteditable=\"\" id=\"runcmd\" class=\"block w-full\"></span>\n                </div>\n                <div class=\"px-4 text-red-400 [&amp;:not(:empty)]:bg-white\" id=\"errormessage\"></div>\n            </div>\n        </section>\n    </div>\n</div>\n\n<script>\n\n\t\t\t\t  </script>",
      "type": "html"
    },
    {
      "code": "\nconst $ = _ => document.querySelector(_)\nconst $$ = _ => document.querySelectorAll(_)\n\nconst fori = (init, stop, inc, fn) => {\n    for (let i = init; i < stop; i += inc) {\n        fn(i);\n    }\n}\nconst repeat = (times, fn) => {\n    for (let i = 0; i < times; i++) {\n        fn(i);\n    }\n}\n\nconst random = (min, max) => Math.floor(Math.random() * (max - min)) + min;\n\n\nfunction selectExample(eg) {\n    const examples = {\n        'low': `\n        _.color('black');\nconst t = _.turtle();\nfori(0, 32, 1, i => {\n    repeat(i, () => {\n        t.forward(i);\n        t.right(358 / i);\n    });\n    t.backward(Math.sqrt(i));\n});\n        `,\n        'rotcircle': `\nconst t = _.turtle();\n// repeat 400 [repeat 34 [fd 12 rt 10] rt 90]\nrepeat(400, () => {\n    repeat(34, () => {\n        t.forward(12);\n        t.right(10);\n    });\n    t.right(90);\n})\n        `,\n        'siggen': `\n        \n        _.clear();\n        const A = _.slider(\"Amplitude\", 0, 100, 50);\n        const F = _.slider(\"Frequency\", 0, 100, 10);\n\n        for (let i = 0; i < 100; i += 0.01) {\n            _.fill(_.circle(100 + i * 10, 100 + A * _.sin(i * F), 1));\n        }\n        `,\n    }\n\n    $('#editor').textContent = examples[eg];\n}\n\nclass Turtle {\n    constructor(x, y) {\n        this.x = x;\n        this.y = y;\n        this.angle = 0;\n        this._penDown = true;\n    }\n\n    forward(distance) {\n        const x = this.x + distance * Math.cos(this.angle);\n        const y = this.y + distance * Math.sin(this.angle);\n        if (this._penDown) {\n            window.ENV.beginPath();\n            window.ENV.moveTo(this.x, this.y);\n            window.ENV.lineTo(x, y);\n            window.ENV.stroke();\n        }\n        this.x = x;\n        this.y = y;\n    }\n\n    backward(distance) {\n        this.forward(-distance);\n    }\n\n    left(angle) {\n        this.angle += angle * Math.PI / 180;\n    }\n\n    right(angle) {\n        this.angle -= angle * Math.PI / 180;\n    }\n\n    // penUp() {\n    //     this._penDown = false;\n    // }\n\n    // penDown() {\n    //     this._penDown = true;\n    // }\n}\n\n\n\nfunction makeDraggable(element) {\n    // Make an element draggable (or if it has a .window-top class, drag based on the .window-top element)\n    let currentPosX = 0, currentPosY = 0, previousPosX = 0, previousPosY = 0;\n\n    // If there is a window-top classed element, attach to that element instead of full window\n    if (element.querySelector('.window-top')) {\n        // If present, the window-top element is where you move the parent element from\n        element.querySelector('.window-top').onmousedown = dragMouseDown;\n    }\n    else {\n        // Otherwise, move the element itself\n        element.onmousedown = dragMouseDown;\n    }\n\n    function dragMouseDown(e) {\n        // Prevent any default action on this element (you can remove if you need this element to perform its default action)\n        e.preventDefault();\n        // Get the mouse cursor position and set the initial previous positions to begin\n        previousPosX = e.clientX;\n        previousPosY = e.clientY;\n        // When the mouse is let go, call the closing event\n        document.onmouseup = closeDragElement;\n        // call a function whenever the cursor moves\n        document.onmousemove = elementDrag;\n    }\n\n    function elementDrag(e) {\n        // Prevent any default action on this element (you can remove if you need this element to perform its default action)\n        e.preventDefault();\n        // Calculate the new cursor position by using the previous x and y positions of the mouse\n        currentPosX = previousPosX - e.clientX;\n        currentPosY = previousPosY - e.clientY;\n        // Replace the previous positions with the new x and y positions of the mouse\n        previousPosX = e.clientX;\n        previousPosY = e.clientY;\n        // Set the element's new position\n        element.style.top = (element.offsetTop - currentPosY) + 'px';\n        element.style.left = (element.offsetLeft - currentPosX) + 'px';\n    }\n\n    function closeDragElement() {\n        // Stop moving when mouse button is released and release events\n        document.onmouseup = null;\n        document.onmousemove = null;\n    }\n}\n\nwindow.appendToEditor = (text) => {\n    $('#editor').textContent += '\\n' + text + '\\n';\n}\nlet isLive = false\n\nlet sliders = {\n\n}\n\nfunction debounce(func, wait, immediate) {\n\tvar timeout;\n\treturn function() {\n\t\tvar context = this, args = arguments;\n\t\tvar later = function() {\n\t\t\ttimeout = null;\n\t\t\tif (!immediate) func.apply(context, args);\n\t\t};\n\t\tvar callNow = immediate && !timeout;\n\t\tclearTimeout(timeout);\n\t\ttimeout = setTimeout(later, wait);\n\t\tif (callNow) func.apply(context, args);\n\t};\n};\n\nlet createdSliders = [ ]\nfunction createSlider(name, min = 0, max = 100, value = 0, step = 5) {\n    if (!sliders[name]) {\n        createdSliders.push(name)\n        sliders[name] = document.createElement('input');\n        sliders[name].type = 'range';\n        sliders[name].min = min;\n        sliders[name].max = max;\n        sliders[name].value = value;\n        sliders[name].step = step;\n        sliders[name].id = name;\n        sliders[name].addEventListener('input', debounce(() => {\n            console.log(`Got modified`)\n            // $(`#${name}value`).textContent = sliders[name].value\n            onCodeEdit()\n        }, 100))\n    }\n    return sliders[name].value\n}\n\nfunction resetSliders() {\n    $('#sliders').innerHTML = ''\n    const unusedSliders = Object.keys(sliders).filter(slider => !createdSliders.includes(slider))\n    for (const slider of unusedSliders) {\n        delete sliders[slider]\n    }\n    createdSliders = []\n}\n\nfunction updateSliders() {\n    $('#sliders').innerHTML = ''\n\n    if (Object.keys(sliders).length === 0) {\n        $('#sliders-parent').style.display = 'none'\n    } else {\n        $('#sliders-parent').style.display = 'block'\n    }\n\n    for (const [key, slider] of Object.entries(sliders)) {\n        const lbl = document.createElement('label')\n        lbl.textContent = key\n        $('#sliders').appendChild(lbl)\n        $('#sliders').appendChild(slider)\n    }\n}\n\nconst onCodeEdit = debounce(() =>{\n    if (isLive) {\n        resetSliders()\n        runCode($('#editor').textContent)\n        updateSliders()\n    }\n}, 250)\n\n\n\nfunction runCode(code) {\n    $('#errormessage').textContent = ``\n    try {\n\t  \tconsole.log(_)\n\t  console.log(window._)\n        const exe = new Function('_', 'repeat', 'fori', `${code}`)\n        exe(window.ENV, repeat, fori)\n    } catch (err) {\n        $('#errormessage').textContent = `⚠ ${err.message}`\n    }\n}\n\nfunction main() {\n    makeDraggable($('#sliders-parent'))\n  \n  \t$('#editor').addEventListener('input', () => {\n\t  onCodeEdit();\n\t});\n\n    /** @type {HTMLCanvasElement} */\n    const canvas = $('canvas');\n\n    const parent = canvas.parentElement;\n    canvas.width = parent?.clientWidth - 8 ?? canvas.width;\n    canvas.height = parent?.clientHeight - 8 ?? canvas.height;\n\n    const toolCanvas = $('#tools')\n    toolCanvas.width = parent?.clientWidth - 8 ?? toolCanvas.width;\n    toolCanvas.height = parent?.clientHeight - 8 ?? toolCanvas.height;\n\n    const ctx = canvas.getContext('2d');\n\n    if (!ctx) throw new Error('Canvas not supported');\n\n\n    $('#toggleLive').addEventListener('click', () => {\n        isLive = !isLive\n        $('#toggleLive').dataset.toggled = isLive ? \"true\" : \"false\"\n    })\n\n    $('#examples-btn').addEventListener('click', () => {\n        $('#examples').classList.toggle('hidden')\n        $('#drawingCanvas').classList.toggle('hidden')\n        $('#tools').classList.toggle('hidden')\n    })\n\n    const addedFns = {\n        width: canvas.width,\n        height: canvas.height,\n        circle: (x, y, r) => {\n            const path = new Path2D();\n            path.arc(x, y, r, 0, Math.PI * 2);\n            return path;\n        },\n        color: (fillC, strokeC) => {\n            ctx.fillStyle = fillC ?? ctx.fillStyle;\n            ctx.strokeStyle = strokeC ?? ctx.strokeStyle;\n        },\n        sin: (deg) => Math.sin(deg * Math.PI / 180),\n        cos: (deg) => Math.cos(deg * Math.PI / 180),\n        tan: (deg) => Math.tan(deg * Math.PI / 180),\n        turtle: (x, y) => {\n            x = x ?? ENV.width / 2;\n            y = y ?? ENV.height / 2;\n\n            return new Turtle(x, y);\n        },\n        clear: () => {\n            ctx.clearRect(0, 0, ENV.width, ENV.height);\n        },\n        slider: createSlider,\n\t  repeat: repeat,\n\t  fori: fori\n    };\n    Object.assign(ctx, addedFns);\n    window.ENV = ctx;\n\n    $('#run').addEventListener('click', () => {\n        resetSliders()\n        runCode($('#editor').textContent)\n        updateSliders()\n    })\n\n    $('#runcmd').addEventListener('keydown', (event) => {\n        if (event.key === 'Enter') {\n            event.preventDefault()\n            runCode($('#runcmd').textContent)\n        }\n    })\n\n    $('#editor').textContent =\n        `\n// Grid\n/*\n_.color('gray');\nfori(20, _.height, 40, j => {\n    fori(20, _.width, 40, i => {\n        _.fill(_.circle(i, j, 3)); \n    })\n})\n*/\n\n// Turtle\n/*\n_.color('black');\nconst t = _.turtle();\n_.fori(0, 32, 1, i => {\n    _.repeat(i, () => {\n        t.forward(i);\n        t.right(358 / i);\n    });\n    t.backward(Math.sqrt(i));\n});\n*/\n\nconst t = _.turtle();\n// repeat 400 [repeat 34 [fd 12 rt 10] rt 90]\n_.repeat(400, () => {\n    _.repeat(34, () => {\n        t.forward(12);\n        t.right(10);\n    });\n    t.right(90);\n})\n\n    `\n\n    toolCanvas.addEventListener('mousemove', (event) => {\n        const rect = canvas.getBoundingClientRect();\n        const x = event.clientX - rect.left;\n        const y = event.clientY - rect.top;\n        $('#coords').textContent = `X: ${x.toFixed(0)}, Y: ${y.toFixed(0)}`;\n    });\n};\n\nmain();\n",
      "status": "[26]<br><span style=\"font-size:8px\">2ms<span></span></span>",
      "output": "",
      "type": "code"
    },
    {
      "code": "<iframe src=\"https://sumidemoo.surge.sh/\" width=\"100%\" height=\"100%\" />",
      "status": "",
      "output": "<iframe src=\"https://sumidemoo.surge.sh/\" width=\"100%\" height=\"100%\"></iframe>",
      "type": "html"
    },
    {
      "code": "",
      "status": "",
      "output": "",
      "type": "html"
    }
  ],
  "source": "https://github.com/gopi-suvanam/jsnb",
  "run_on_load": false
}